# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  my-executor:
    docker:
      - image: cimg/openjdk:11.0

orbs:
  slack: circleci/slack@4.9.3
  shellcheck: circleci/shellcheck@3.1.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build:
    executor: my-executor
    steps:
      # Checkout the code as the first step.
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
      # Use mvn clean and package as the standard maven build phase
      - run: pwd
      - run: mkdir -p /tmp/workspace/target
      - run:
          name: Build
          command: mvn -B -DskipTests clean install -s settings.xml
      - run: cp -r /home/circleci/project/modules/ams-api/target/* /tmp/workspace/target/
      - store_artifacts:
          path: /home/circleci/project/modules/ams-api/target
          destination: target
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: /tmp
          # Must be relative path from root
          paths:
            - workspace/target/*
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

  test:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Build
          command: mvn test -s settings.xml
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

  push:
    docker:
      - image: docker:18.09
#    machine:
#      image: ubuntu-2004:202104-01  # any available image
#      docker_layer_caching: true
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace/target/ams-api-0.0.1-SNAPSHOT.jar
      - run: ls -lrt /tmp/workspace/target/
      - run: mkdir modules/ams-api/target; cp -r /tmp/workspace/target/* modules/ams-api/target
      - run:
          name: Docker Login
          command: docker login registry.gitlab.com -u hoanghiep -p glpat-82jJhnwy2zV5_gH6D3vr
      - run: pwd
      - run:
          name: Docker Build
          command: cd modules/ams-api; docker build --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg GIT_FULL_BRANCH=$(git rev-parse --abbrev-ref HEAD) -t registry.gitlab.com/vuduc047/pegasus-ams/circleci:$CIRCLE_SHA1
            .
      - run:
          name: Docker Push
          command: docker push registry.gitlab.com/vuduc047/pegasus-ams/circleci:$CIRCLE_SHA1
      - run: ls -lrt ./kube

  deploy:
    docker:
      - image: dtzar/helm-kubectl
    steps:
      - checkout
      - run:
          name: Update deployment
          command:  mkdir -p ~/.docker;
                    echo "$CIRCLECI_CRT" > circleci.crt;
                    echo "$CIRCLECI_KEY" > circleci.key;
                    echo "$CIRCLECI_CRT";
                    cat circleci.crt;
                    kubectl config set-cluster microk8s-cluster --server=https://14.225.255.20:16443 --insecure-skip-tls-verify --kubeconfig=circleci;
                    kubectl config set-credentials circleci --client-certificate=circleci.crt --client-key=circleci.key --embed-certs=true --kubeconfig=circleci;
                    kubectl config set-context circleci --cluster=microk8s-cluster --user=circleci --kubeconfig=circleci;
                    kubectl config use-context circleci --kubeconfig=circleci;
                    kubectl config view --kubeconfig=circleci;
                    if ( kubectl get deployment -n default --kubeconfig=circleci | grep -q "pegasus-ams" ); then echo "Skip helm"; else helm upgrade --install pegasus-ams --namespace=default .; fi;
                    kubectl set image deployment/pegasus-ams pegasus-ams=registry.gitlab.com/vuduc047/pegasus-ams/circleci:$CIRCLE_SHA1 --record --kubeconfig=circleci

  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  version: 2
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - shellcheck/check:
          dir: ./scripts
          exclude: SC2148
      - build
      - test:
          requires:
            - build
      - push:
          requires:
            - build
            - shellcheck/check
      - deploy:
          requires:
            - push
            - test
            - shellcheck/check
      - notify:
          context: slack-secrets
