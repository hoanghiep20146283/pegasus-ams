# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  my-executor:
    docker:
      - image: cimg/openjdk:11.0

orbs:
  slack: circleci/slack@4.9.3
  shellcheck: circleci/shellcheck@3.1.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build:
    executor: my-executor
    steps:
      # Checkout the code as the first step.
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
      # Use mvn clean and package as the standard maven build phase
      - run: pwd
      - run: mkdir -p /tmp/workspace/target
      - run:
          name: Build
          command: mvn -B -DskipTests clean install -s settings.xml
      - run: cp -r /home/circleci/project/modules/ams-api/target/* /tmp/workspace/target/
      - store_artifacts:
          path: /home/circleci/project/modules/ams-api/target
          destination: target
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: /tmp
          # Must be relative path from root
          paths:
            - workspace/target/*
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

  test:
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
      - run:
          name: Build
          command: mvn test -s settings.xml
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

  push:
    docker:
      - image: docker:18.09
#    machine:
#      image: ubuntu-2004:202104-01  # any available image
#      docker_layer_caching: true
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: /tmp/workspace/target/ams-api-0.0.1-SNAPSHOT.jar
      - run: ls -lrt /tmp/workspace/target/
      - run: mkdir modules/ams-api/target; cp -r /tmp/workspace/target/* modules/ams-api/target
      - run:
          name: Docker Login
          command: docker login registry.gitlab.com -u hoanghiep -p glpat-82jJhnwy2zV5_gH6D3vr
      - run: pwd
      - run:
          name: Docker Build
          command: cd modules/ams-api; docker build --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg GIT_FULL_BRANCH=$(git rev-parse --abbrev-ref HEAD) -t registry.gitlab.com/vuduc047/pegasus-ams/circleci:$CIRCLE_SHA1
            .
      - run:
          name: Docker Push
          command: docker push registry.gitlab.com/vuduc047/pegasus-ams/circleci:$CIRCLE_SHA1
      - run: ls -lrt ./kube

  deploy:
    docker:
      - image: dtzar/helm-kubectl
    environment:
      CIRCLECI_CRT: |
        LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRekNDQWl1Z0F3SUJBZ0lSQUppZGUyRVZySnQwVHFLa1FFSlNkWTR3RFFZSktvWklodmNOQVFFTEJRQXcKRnpFVk1CTUdBMVVFQXd3TU1UQXVNVFV5TGpFNE15NHhNQjRYRFRJeU1EWXlNekF6TlRFek1Gb1hEVEl6TURZeQpNekF6TlRFek1Gb3dXekVMTUFrR0ExVUVCaE1DUVZVeEV6QVJCZ05WQkFnVENsTnZiV1V0VTNSaGRHVXhFVEFQCkJnTlZCQW9UQ0dOcGNtTnNaV05wTVJFd0R3WURWUVFMRXdoamFYSmpiR1ZqYVRFUk1BOEdBMVVFQXhNSVkybHkKWTJ4bFkya3dnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEQldFMGhHNFZWRWptMApKc1FWQVhnWGRqVVF2UlJKWEZ0MlREZmNTMGdKejNvVlF5a3lqbnczWXgva3hJNXI4V0swRlJJK1NwamRJZk9GCjJidXJKOTBwV0laZkM5a0oyMzhOcUxYRmVsNFVNbDRqRXVWZmllUmFBKzNrZW1zL0NRWFdhZzNJLzFseDZMNkwKWEtydHp2NHEyUEh1TndydFdoT0xkcS85OTlLRHhqRHFOdDRrajRNRURtN0kyOXZUcFRwbkZiZVFZa0ZYNmsrOAowRXN3cldjUUMwVnhqYVQ2RDZMUjRlWVBOK0l1Zjgrd2dKODJaSzIxSUxXeHlacjB2NnJnMGZ1MHQ2YkF6LzRoCkdtUlI0dC9wZGdkaTRpb3BjeWxzejJqcks0S2lrUnMzaTRWUk9tOFNzTFhOcWFpY1VFMHNRNVg5dE4vUDVkMCsKc3E3bzZUeUJBZ01CQUFHalJqQkVNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQwpNQUF3SHdZRFZSMGpCQmd3Rm9BVWx3YXNudHZUdE9Sa2RITFdlNG9tR2JMU01LUXdEUVlKS29aSWh2Y05BUUVMCkJRQURnZ0VCQUg3dDByNWh5S01qMnpMTEl0V3lWTWhVdm1KMTZ3RURXMll1K1NMdWt3YndBMXNJUmhZVEE1eFQKNXZOTDNuQ205YUlkenhPbi90bDlvY0hXMW85aG5lc3ZvWi9KdTFIK21IU1N4TUtHLy93R0pTNXZDeXEvdTd0egpHQnAyUXROOFlkSnBNd0cwK2pWL1J0K3pMWExMU084WlV3ZUJKOEQ3N2FReDdKUTRxckNneGxHZ2c2aVR6Vm5PCkVSNDdxWk5YQlg0d045ZHdvbHZOYVVHWW9BTjBlRmFidE1VRHVrdGF3TGxnSU90UTU2c0JkVVpFMzl0YXdhVzMKUlZ5aFQ1aGxTcFowQXZpakFtRi9KRENqYktmc0xqSHgzdnVmWng2MzFheHdwWG5LK1NtalhsSit6blh0emtvOApDR2JYNjFEOGxSS0dQNWtRclcvUG1uQ1JrdTFQNHlRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
      CIRCLECI_KEY: |
        LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KTUlJRW93SUJBQUtDQVFFQXdWaE5JUnVGVlJJNXRDYkVGUUY0RjNZMUVMMFVTVnhiZGt3MzNFdElDYzk2RlVNcA0KTW81OE4yTWY1TVNPYS9GaXRCVVNQa3FZM1NIemhkbTdxeWZkS1ZpR1h3dlpDZHQvRGFpMXhYcGVGREplSXhMbA0KWDRua1dnUHQ1SHByUHdrRjFtb055UDlaY2VpK2kxeXE3YzcrS3RqeDdqY0s3Vm9UaTNhdi9mZlNnOFl3NmpiZQ0KSkkrREJBNXV5TnZiMDZVNlp4VzNrR0pCVitwUHZOQkxNSzFuRUF0RmNZMmsrZytpMGVIbUR6ZmlMbi9Qc0lDZg0KTm1TdHRTQzFzY21hOUwrcTROSDd0TGVtd00vK0lScGtVZUxmNlhZSFl1SXFLWE1wYk05bzZ5dUNvcEViTjR1Rg0KVVRwdkVyQzF6YW1vbkZCTkxFT1YvYlRmeitYZFByS3U2T2s4Z1FJREFRQUJBb0lCQUd5U2EyMkdDTStHMW9TRg0KcUdLcldvYkNTSFpIMTFhQzJKR0xwMnE3azQ1K3hlMmVzMG5DblpwMHZYbzNya3FMV0lRTHVSemx3d1dhaFNmSw0KNXducjd0UEM5R0gzUXorMzFKY1ZBRTRPc3puZ051QzNRYnJ1c2g2aVNqcWRUQkF2dnVseTBKN29WWkFUeEx4NQ0Kb3pxN25CcnZqSnZhcVBZME9QbCtBc0k1SWl3QWF3SjNzb2h4N25BVzZnSXVSSXNGbXcxTStuZFJ1eEtDT3JLaw0KcmJreG1yN0RWcER6NmFheFpzR1BtVGtiakJ1aXBuVG1qK3NEd1ViaVdib2pDN1JiaGtvV2lHNDdna1dReXMvcQ0KOW9xbjlZcWhjWUdndFZKTEt3TUI4allXc05RVThvMDBJVGJPcDNpZ0pac3l6TnQxczBSN3VFWTZBdmRrTTdDbw0KbHZxY2VZa0NnWUVBN3ZMUnQrUGRBK1VMelFMZG1URVFOOXBBMkc5ZWRXSUNvY2NPWitUaTJiVmRUMGxBaGZjTw0KWkN6OENCY0NoanlORmMxYzRWUS9vbm9rdGhzYzVwK3llUXdsa3VvZXdGWWhITFlJKzBUZkVjNFp2TkR6ZHVLZQ0KM0Y4T2lZYlJPcnRyMDQrL1ArUXdZUW5GbVJwU3Z2bEpjOTRNTm5iN0E1Y0k5REtrL1VXTWZKY0NnWUVBenlSaA0KN2NFQnpldVJNTUdiNGFoUUdoVmFRNlNteWxUSEdqdTJjdzE0QmwvbzlFNFkvTk0xZGhzUkFPMGRiM3ZRU3VYdA0KekZBNGt4OEY5SkVRQm4wS2N3M2psUFVrTnRZUWpsdGdZeUI1Zy8zMC9kbXBwYUs2LzliYzNwellISE1RSklvdw0KRnNXQ0tGeWxMR1h0djlDT3kyOEhUUW1IQUtZTlpxdEhGYWk4ZXFjQ2dZRUE3V1JFUXFPWk1vTmVKQUdTMHQxUg0KdFl1YUhPMFlOUnA0YnUxcVBJSERkbk9mRG1SQ1BGWGs4RlZZMTFpMDQxUkkvcjRXWnE3aXdiTUR3Z0JSeURZaw0KZytvemNqQXkrUGNZMG9OdmpPTXhrMmpsWFJkaXFsd2ZZK1QwZG1HQWdROHU0dkxQR05URjA4SjNrOUg1SDA1Zg0KVVVQcmNqam16UHhDb3dtbHJSSnBybVVDZ1lCS2Zvb2RhQWtQRmtXNzVCVDhYWHlaTk02bWZ3Tmd4b1pvSDh0bw0KcXhKY01JZmx2R1J1SUVNY3UzVXRBUmxSNjVRb0szS094TmJqeWdkcFFmWWlienVmendIbW94YW9CZW9rV0NaYw0KMytQem5SUkxhc2tCQVhvQTRqUENkMk9kTDZCQms5VGhpNXhZaWFENVM1cnFIY1lNMFZ3dHoxeFcxbUVCYUYyRA0KSTVETkJ3S0JnRUc2VVkzdytiNHhKSGRIV3ljcFp3Vlcwb0p5NFUveWQrWWR2TUhseFdncnJZSkJSSERTNHN2MA0KOFc3SXIrKzRwR1cxVDZWUENjc1pkbVM4N2pWR05WMHg5WjQycTBvSmNIN3Rqa2xIU0g3VTEyUDFDWS91VWJqRQ0KakdSS2t5S2MydW9ZSjd2eU9sR1dxeEdLVWtWNmRKN3A3cjRieHdwc2MzTmgwZVI0Mk5CZQ0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0NCg==
    steps:
      - checkout
      - run:
          name: Update deployment
          command:  mkdir -p ~/.docker;
                    echo -n "$CIRCLECI_CRT" | base64 -d > ./circleci.crt;
                    echo -n "$CIRCLECI_KEY" | base64 -d > ./circleci.key;
                    cat ./circleci.crt;
                    kubectl config set-cluster microk8s-cluster --server=https://14.225.255.20:16443 --insecure-skip-tls-verify;
                    kubectl config set-credentials circleci --client-certificate=./circleci.crt --client-key=./circleci.key;
                    kubectl config set-context circleci --cluster=microk8s-cluster --user=circleci;
                    kubectl config use-context circleci;
                    kubectl config view;
                    if ( kubectl get deployment -n default | grep -q "pegasus-ams" ); then echo "Skip helm"; else helm upgrade --install pegasus-ams --namespace=default .; fi;
                    kubectl set image deployment/pegasus-ams pegasus-ams=registry.gitlab.com/vuduc047/pegasus-ams/circleci:$CIRCLE_SHA1 --record

  notify:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  version: 2
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - shellcheck/check:
          dir: ./scripts
          exclude: SC2148
      - build
      - test:
          requires:
            - build
      - push:
          requires:
            - build
            - shellcheck/check
      - deploy:
      - notify:
          context: slack-secrets
