services:
  - docker:19-dind

variables:
  VARIABLE_DATA: Gitlab-CI-YAML
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_DRIVER: overlay2
  AGENT_NAME: pegasus
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"

cache:
  paths:
    - ./.m2/repository
  # keep cache across branch
  key: "$CI_BUILD_REF_NAME"

stages:
  - sonarqube-check
  - package
  - build
  - component-scan
  - deploy

before_script:
  - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  - export WEB_IMAGE=$IMAGE:web
  - echo $IMAGE:web
  - echo $CI_REGISTRY_USER
  - echo $CI_JOB_TOKEN
  - echo $CI_REGISTRY
  - echo WEB_IMAGE
  - echo $CI_REGISTRY_IMAGE
  - echo $DEPLOY_TOKEN

sonarqube-check:
  image: maven:3.8.5-jdk-11
  stage: sonarqube-check
  script:
    - mvn clean verify sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.projectKey=Pegasus-AMS -s settings.xml
  only:
    - main
    - feature/anchore-integrate

package:
  image: maven:3.8.4-jdk-8
  stage: package
  script:
    - mvn clean install -s settings.xml
  artifacts:
    paths:
      - modules/ams-api/target/*.jar
  only:
    - main
    - feature/anchore-integrate

build:
  image:
    name: docker:18.09
    entrypoint: [""]
  services:
    - docker:18.09-dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  stage: build
  script:
    - ls
    - cd modules/ams-api
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') --build-arg GIT_FULL_BRANCH=$(git rev-parse --abbrev-ref HEAD) --build-arg SHORT_COMMIT_HASH=${CI_COMMIT_SHA:0:8} -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - feature/anchore-integrate

component-scan:
  stage: component-scan
  image: 
    name: anchore/engine-cli:latest
  script:
    - if ( anchore-cli registry get $CI_REGISTRY | grep -q "error" ); then anchore-cli registry add "$CI_REGISTRY" $GITLAB_REGISTRY_USERNAME $GITLAB_REGISTRY_TOKEN; else echo "Skip add registry"; fi
    - anchore-cli image add $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - anchore-cli image wait $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - anchore-cli image list
    - anchore-cli image vuln $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA os > ./image-$CI_PROJECT_NAME-$CI_COMMIT_SHA-report.json
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}
    paths:
      - image-$CI_PROJECT_NAME-$CI_COMMIT_SHA-report.json

deploy:
  image:
    name: dtzar/helm-kubectl
    entrypoint: [""]
  stage: deploy
  script:
    - kubectl config get-contexts
    - kubectl config use-context $CI_PROJECT_PATH:pegasus-ams
    - kubectl config set-context --current --namespace=default
    - kubectl get pods
    - kubectl config view --raw
    - cd charts/pegasus-ams-chart
    - if ( kubectl get deployment -n default | grep -q "pegasus-ams" ); then echo "Skip helm"; else helm upgrade --install pegasus-ams --namespace=default .; fi
    - kubectl set image deployment/pegasus-ams pegasus-ams=${CI_REGISTRY_IMAGE}:${CI_COMMIT_SHA} --record
  only:
    - main
    - feature/anchore-integrate